/* -LICENSE-START-
** Copyright (c) 2011 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#import "SwitcherPanelAppDelegate.h"
#include <libkern/OSAtomic.h>
#include <os/atomic.h>
#include <string>

#import "LXOSCInterface.h"
#import "LXOSCMessage.h"
#import "NSValue_Type_Float.h"

static inline bool	operator== (const REFIID& iid1, const REFIID& iid2)
{ 
	return CFEqual(&iid1, &iid2);
}

// Callback class for monitoring property changes on a mix effect block.
class MixEffectBlockMonitor : public IBMDSwitcherMixEffectBlockCallback
{
public:
	MixEffectBlockMonitor(SwitcherPanelAppDelegate* uiDelegate) : mUiDelegate(uiDelegate), mRefCount(1) { }

protected:
	virtual ~MixEffectBlockMonitor() { }

public:
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;
		
		if (iid == IID_IBMDSwitcherMixEffectBlockCallback)
		{
			*ppv = static_cast<IBMDSwitcherMixEffectBlockCallback*>(this);
			AddRef();
			return S_OK;
		}
		
		if (CFEqual(&iid, IUnknownUUID))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}
		
		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
        return  os_atomic_std(atomic_fetch_add_explicit)(
                                                         os_cast_to_atomic_pointer(&mRefCount), 1,
                                                         os_atomic_std(memory_order_relaxed));
		//return ::OSAtomicIncrement32(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
        int newCount = os_atomic_std(atomic_fetch_sub_explicit)(
                                                                os_cast_to_atomic_pointer(&mRefCount), 1,
                                                                os_atomic_std(memory_order_relaxed));
		//int newCount = ::OSAtomicDecrement32(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}
	
	HRESULT Notify(BMDSwitcherMixEffectBlockEventType eventType)
	{
		switch (eventType)
		{
			case bmdSwitcherMixEffectBlockEventTypeProgramInputChanged:
				[mUiDelegate performSelectorOnMainThread:@selector(updateProgramButtonSelection) withObject:nil waitUntilDone:YES];
				break;
			case bmdSwitcherMixEffectBlockEventTypePreviewInputChanged:
				[mUiDelegate performSelectorOnMainThread:@selector(updatePreviewButtonSelection) withObject:nil waitUntilDone:YES];
				break;
			case bmdSwitcherMixEffectBlockEventTypeInTransitionChanged:
				[mUiDelegate performSelectorOnMainThread:@selector(updateInTransitionState) withObject:nil waitUntilDone:YES];
				break;
			case bmdSwitcherMixEffectBlockEventTypeTransitionPositionChanged:
				[mUiDelegate performSelectorOnMainThread:@selector(updateSliderPosition) withObject:nil waitUntilDone:YES];
				break;
			case bmdSwitcherMixEffectBlockEventTypeTransitionFramesRemainingChanged:
				[mUiDelegate performSelectorOnMainThread:@selector(updateTransitionFramesTextField) withObject:nil waitUntilDone:YES];
				break;
			case bmdSwitcherMixEffectBlockEventTypeFadeToBlackFramesRemainingChanged:
				[mUiDelegate performSelectorOnMainThread:@selector(updateFTBFramesTextField) withObject:nil waitUntilDone:YES];
				break;
			default:	// ignore other property changes not used for this sample app
				break;
		}
		return S_OK;
	}

private:
	SwitcherPanelAppDelegate*		mUiDelegate;
	int								mRefCount;
};

// Monitor the properties on Switcher Inputs.
// In this sample app we're only interested in changes to the Long Name property to update the PopupButton list
class InputMonitor : public IBMDSwitcherInputCallback
{
public:
	InputMonitor(IBMDSwitcherInput* input, SwitcherPanelAppDelegate* uiDelegate) : mInput(input), mUiDelegate(uiDelegate), mRefCount(1)
	{
		mInput->AddRef();
		mInput->AddCallback(this);
	}

protected:
	~InputMonitor()
	{
		mInput->RemoveCallback(this);
		mInput->Release();
	}
	
public:
	// IBMDSwitcherInputCallback interface
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;
		
		if (iid == IID_IBMDSwitcherInputCallback)
		{
			*ppv = static_cast<IBMDSwitcherInputCallback*>(this);
			AddRef();
			return S_OK;
		}
		
		if (CFEqual(&iid, IUnknownUUID))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}
		
		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
        return  os_atomic_std(atomic_fetch_add_explicit)(
                                                         os_cast_to_atomic_pointer(&mRefCount), 1,
                                                         os_atomic_std(memory_order_relaxed));
		//return ::OSAtomicIncrement32(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
        int newCount = os_atomic_std(atomic_fetch_sub_explicit)(
                                                                os_cast_to_atomic_pointer(&mRefCount), 1,
                                                                os_atomic_std(memory_order_relaxed));
        //int newCount = ::OSAtomicDecrement32(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}

	HRESULT Notify(BMDSwitcherInputEventType eventType)
	{
		switch (eventType)
		{
			case bmdSwitcherInputEventTypeLongNameChanged:
				[mUiDelegate performSelectorOnMainThread:@selector(updatePopupButtonItems) withObject:nil waitUntilDone:YES];
			default:	// ignore other property changes not used for this sample app
				break;
		}
		
		return S_OK;
	}
	IBMDSwitcherInput* input() { return mInput; }
	
private:
	IBMDSwitcherInput*			mInput;
	SwitcherPanelAppDelegate*	mUiDelegate;
	int							mRefCount;
};

// Callback class to monitor switcher disconnection
class SwitcherMonitor : public IBMDSwitcherCallback
{
public:
	SwitcherMonitor(SwitcherPanelAppDelegate* uiDelegate) :	mUiDelegate(uiDelegate), mRefCount(1) { }

protected:
	virtual ~SwitcherMonitor() { }
	
public:
	// IBMDSwitcherCallback interface
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;
		
		if (iid == IID_IBMDSwitcherCallback)
		{
			*ppv = static_cast<IBMDSwitcherCallback*>(this);
			AddRef();
			return S_OK;
		}
		
		if (CFEqual(&iid, IUnknownUUID))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}
		
		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
        return  os_atomic_std(atomic_fetch_add_explicit)(
                                                         os_cast_to_atomic_pointer(&mRefCount), 1,
                                                         os_atomic_std(memory_order_relaxed));
		//return ::OSAtomicIncrement32(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
        int newCount = os_atomic_std(atomic_fetch_sub_explicit)(
                                                                os_cast_to_atomic_pointer(&mRefCount), 1,
                                                                os_atomic_std(memory_order_relaxed));
        //int newCount = ::OSAtomicDecrement32(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}
	
	// Switcher events ignored by this sample app
	HRESULT STDMETHODCALLTYPE	Notify(BMDSwitcherEventType eventType, BMDSwitcherVideoMode coreVideoMode)
	{
		if (eventType == bmdSwitcherEventTypeDisconnected)
		{
			[mUiDelegate performSelectorOnMainThread:@selector(switcherDisconnected) withObject:nil waitUntilDone:YES];
		}
		return S_OK;
	}
	
private:
	SwitcherPanelAppDelegate*	mUiDelegate;
	int							mRefCount;
};


@implementation SwitcherPanelAppDelegate

@synthesize window;

- (void)applicationDidFinishLaunching:(NSNotification *)aNotification
{
	mSwitcherDiscovery = NULL;
	mSwitcher = NULL;
	mMixEffectBlock = NULL;
	
	mSwitcherMonitor = new SwitcherMonitor(self);
	mMixEffectBlockMonitor = new MixEffectBlockMonitor(self);
	
	mMoveSliderDownwards = false;
	mCurrentTransitionReachedHalfway = false;
	
	mSwitcherDiscovery = CreateBMDSwitcherDiscoveryInstance();
	if (! mSwitcherDiscovery)
	{
		NSAlert* alert = [[NSAlert alloc] init];
		[alert setMessageText:@"Could not create Switcher Discovery Instance.\nATEM Switcher Software may not be installed.\n"];
		[alert addButtonWithTitle:NSLocalizedString(@"OK", nil)];
		[alert beginSheetModalForWindow:window completionHandler:^(NSModalResponse returnCode) {
			[NSApp terminate:self];
		}];
	}
	
	[self switcherDisconnected];		// start with switcher disconnected
}

- (void)applicationWillTerminate:(NSNotification*)aNotification
{
    if ( [LXOSCInterface sharedOSCInterface] ) {
        [LXOSCInterface closeSharedOSCInterface];
    }
    
	mSwitcherMonitor->Release();
	mSwitcherMonitor = NULL;
	
	mMixEffectBlockMonitor->Release();
	mMixEffectBlockMonitor = NULL;

	if (mSwitcherDiscovery)
	{
		mSwitcherDiscovery->Release();
		mSwitcherDiscovery = NULL;
	}
}

- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(NSApplication*)sender
{
	return YES;
}

#pragma mark actions
//
// Actions
//
- (IBAction)connectButtonPressed:(id)sender
{
	NSString* address = [mAddressTextField stringValue];
	
	BMDSwitcherConnectToFailure			failReason;
	
	// Note that ConnectTo() can take several seconds to return, both for success or failure,
	// depending upon hostname resolution and network response times, so it may be best to
	// do this in a separate thread to prevent the main GUI thread blocking.
	HRESULT hr = mSwitcherDiscovery->ConnectTo((CFStringRef)address, &mSwitcher, &failReason);
	if (SUCCEEDED(hr))
	{
		[self switcherConnected];
	}
	else
	{
		NSString* reason;
		switch (failReason)
		{
			case bmdSwitcherConnectToFailureNoResponse:
				reason = NSLocalizedString(@"No response from Switcher", nil);
				break;
			case bmdSwitcherConnectToFailureIncompatibleFirmware:
				reason = NSLocalizedString(@"Switcher has incompatible firmware", nil);
				break;
			default:
				reason = NSLocalizedString(@"Connection failed for unknown reason", nil);
		}
		NSAlert* alert = [[[NSAlert alloc] init] autorelease];
		[alert setMessageText:reason];
		[alert addButtonWithTitle:NSLocalizedString(@"OK", nil)];
		[alert beginSheetModalForWindow:window completionHandler:nullptr];
	}
}

- (IBAction)cutButtonPressed:(id)sender
{
	mMixEffectBlock->PerformCut();
}

- (IBAction)autoButtonPressed:(id)sender
{
	mMixEffectBlock->PerformAutoTransition();
}

- (IBAction)FTBButtonPressed:(id)sender
{
	mMixEffectBlock->PerformFadeToBlack();
}

- (IBAction)programPopupChanged:(id)sender
{
	BMDSwitcherInputId selectedProgramInput = [[mProgramInputsPopup selectedItem] tag];
	mMixEffectBlock->SetProgramInput(selectedProgramInput);
}

- (IBAction)previewPopupChanged:(id)sender
{
	BMDSwitcherInputId selectedPreviewInput = [[mPreviewInputsPopup selectedItem] tag];
	mMixEffectBlock->SetPreviewInput(selectedPreviewInput);
}

- (IBAction)sliderChanged:(id)sender
{
	double position = [mSlider doubleValue] / 100.0;
	if (mMoveSliderDownwards)
		position = (100 - [mSlider doubleValue]) / 100.0;		// deal with flipped slider handle position

	mMixEffectBlock->SetTransitionPosition(position);
}

- (IBAction) oscStartStop:(id)sender {
    if ( [LXOSCInterface sharedOSCInterface] ) {
        [LXOSCInterface closeSharedOSCInterface];
        [mOSCButton setTitle:NSLocalizedString(@"Start", nil)];
    } else {
        int port = [mOSCPortTextField intValue];
        [LXOSCInterface initSharedInterfaceWithAddress:@"0.0.0.0" port:port serviceName:@"BMD_Switcher" delegate:self];
        
        [mOSCButton setTitle:NSLocalizedString(@"Stop", nil)];
    }
}

#pragma mark switcher connection change handling

- (void)switcherConnected
{
	HRESULT result;
	IBMDSwitcherMixEffectBlockIterator* iterator = NULL;
	IBMDSwitcherInputIterator* inputIterator = NULL;
	
	[mConnectButton setEnabled:NO];			// disable Connect button while connected
	
	NSString* productName;
	if (FAILED(mSwitcher->GetProductName((CFStringRef*)&productName)))
	{
		NSLog(@"Could not get switcher product name");
		return;
	}
	
	[mSwitcherNameLabel setStringValue:productName];
	[productName release];
	
	mSwitcher->AddCallback(mSwitcherMonitor);
	
	// Create an InputMonitor for each input so we can catch any changes to input names
	result = mSwitcher->CreateIterator(IID_IBMDSwitcherInputIterator, (void**)&inputIterator);
	if (SUCCEEDED(result))
	{
		IBMDSwitcherInput* input = NULL;
		
		// For every input, install a callback to monitor property changes on the input
		while (S_OK == inputIterator->Next(&input))
		{
			InputMonitor* inputMonitor = new InputMonitor(input, self);
			input->Release();
			mInputMonitors.push_back(inputMonitor);
		}
		inputIterator->Release();
		inputIterator = NULL;
	}
		
	// Get the mix effect block iterator
	result = mSwitcher->CreateIterator(IID_IBMDSwitcherMixEffectBlockIterator, (void**)&iterator);
	if (FAILED(result))
	{
		NSLog(@"Could not create IBMDSwitcherMixEffectBlockIterator iterator");
		goto finish;
	}
	
	// Use the first Mix Effect Block
	if (S_OK != iterator->Next(&mMixEffectBlock))
	{
		NSLog(@"Could not get the first IBMDSwitcherMixEffectBlock");
		goto finish;
	}
	
	mMixEffectBlock->AddCallback(mMixEffectBlockMonitor);
	
	[self mixEffectBlockBoxSetEnabled:YES];
	[self updatePopupButtonItems];
	[self updateSliderPosition];
	[self updateTransitionFramesTextField];
	[self updateFTBFramesTextField];
	
finish:
	if (iterator)
		iterator->Release();
}

- (void)switcherDisconnected
{
	[mConnectButton setEnabled:YES];			// enable connect button so user can re-connect
	[mSwitcherNameLabel setStringValue:@""];
	
	[self mixEffectBlockBoxSetEnabled:NO];
	
	// cleanup resources created when switcher was connected
	for (std::list<InputMonitor*>::iterator it = mInputMonitors.begin(); it != mInputMonitors.end(); ++it)
	{
		(*it)->Release();
	}
	mInputMonitors.clear();
	
	if (mMixEffectBlock)
	{
		mMixEffectBlock->RemoveCallback(mMixEffectBlockMonitor);
		mMixEffectBlock->Release();
		mMixEffectBlock = NULL;
	}
	
	if (mSwitcher)
	{
		mSwitcher->RemoveCallback(mSwitcherMonitor);
		mSwitcher->Release();
		mSwitcher = NULL;
	}
}

#pragma mark GUI updates
//
// GUI updates
//
- (void)updatePopupButtonItems
{
	HRESULT result;
	IBMDSwitcherInputIterator* inputIterator = NULL;
	IBMDSwitcherInput* input = NULL;
	
	result = mSwitcher->CreateIterator(IID_IBMDSwitcherInputIterator, (void**)&inputIterator);
	if (FAILED(result))
	{
		NSLog(@"Could not create IBMDSwitcherInputIterator iterator");
		return;
	}
	
	[mProgramInputsPopup removeAllItems];
	[mPreviewInputsPopup removeAllItems];
    mNumberOfInputs = 0;

	while (S_OK == inputIterator->Next(&input))
	{
		NSString* name;
		BMDSwitcherInputId id;

		input->GetInputId(&id);
		input->GetLongName((CFStringRef*)&name);
		
		[mProgramInputsPopup addItemWithTitle:name];
		[[mProgramInputsPopup lastItem] setTag:id];
		
		[mPreviewInputsPopup addItemWithTitle:name];
		[[mPreviewInputsPopup lastItem] setTag:id];
        
        mNumberOfInputs++;
		
		input->Release();
		[name release];
	}
	inputIterator->Release();
	
	[self updateProgramButtonSelection];
	[self updatePreviewButtonSelection];
}

- (void)updateProgramButtonSelection
{
	BMDSwitcherInputId	programId;
	mMixEffectBlock->GetProgramInput(&programId);
	[mProgramInputsPopup selectItemWithTag:programId];
}

- (void)updatePreviewButtonSelection
{
	BMDSwitcherInputId	previewId;
	mMixEffectBlock->GetPreviewInput(&previewId);
	[mPreviewInputsPopup selectItemWithTag:previewId];
}

- (void)updateInTransitionState
{
	bool inTransition;
	mMixEffectBlock->GetInTransition(&inTransition);
	
	if (inTransition == false)
	{
		// Toggle the starting orientation of slider handle if a transition has passed through halfway
		if (mCurrentTransitionReachedHalfway)
		{
			mMoveSliderDownwards = ! mMoveSliderDownwards;
			[self updateSliderPosition];
		}
		
		mCurrentTransitionReachedHalfway = false;
	}
}

- (void)updateSliderPosition
{
	double position;
	mMixEffectBlock->GetTransitionPosition(&position);
	
	// Record when transition passes halfway so we can flip orientation of slider handle at the end of transition
	mCurrentTransitionReachedHalfway = (position >= 0.50);

	double sliderPosition = position * 100;
	if (mMoveSliderDownwards)
		sliderPosition = 100 - position * 100;		// slider handle moving in opposite direction
	
	[mSlider setDoubleValue:sliderPosition];
	[mLevelIndicator setDoubleValue:position * 20];
}

- (void)updateTransitionFramesTextField
{
	uint32_t framesRemaining;
	mMixEffectBlock->GetTransitionFramesRemaining(&framesRemaining);
	[mTransitionFramesTextField setIntegerValue:framesRemaining];
}

- (void)updateFTBFramesTextField
{
	uint32_t framesRemaining;
	mMixEffectBlock->GetFadeToBlackFramesRemaining(&framesRemaining);
	[mFTBFramesTextField setIntegerValue:framesRemaining];
}

- (void)mixEffectBlockBoxSetEnabled:(bool)enabled
{
	[mProgramInputsPopup setEnabled:enabled];
	[mPreviewInputsPopup setEnabled:enabled];
	[mCutButton setEnabled:enabled];
	[mAutoButton setEnabled:enabled];
	[mFTBButton setEnabled:enabled];
	[mSlider setEnabled:enabled];
	[mTransitionFramesTextField setEnabled:enabled];
	[mFTBFramesTextField setEnabled:enabled];
}

#pragma mark OSCInterface Delegate

-(void) oscMessageReceived:(LXOSCMessage *) msg {
    NSArray* addressPattern = [msg addressPattern];
    NSInteger apParts = [addressPattern count];
    
    if ( apParts > 2 ) {
        if ( [[addressPattern firstObject] isEqualToString:@"bmd"] ) {
            if ( [[addressPattern objectAtIndex:1] isEqualToString:@"switcher"] ) {
                
                // /bmd/switcher/transition/auto        [1.0],
                // /bmd/switcher/transition/cut         [1.0],
                // /bmd/switcher/transition/ftb         [1.0]
                // /bmd/switcher/transition/position    [P]
                if ( [[addressPattern objectAtIndex:2] isEqualToString:@"transition"] ) {
                    if ( apParts == 4 ) {
                        if ( [msg argumentCount] == 1 ) {
                            [self oscDispatchTransition:[addressPattern objectAtIndex:3] arg:[msg floatAtIndex:0]];
                        }
                    }
                }
                
                // /bmd/switcher/preview/N [1.0]
                // /bmd/switcher/preview   [N]
                else if ( [[addressPattern objectAtIndex:2] isEqualToString:@"preview"] ) {
                    if ( apParts == 4 ) {
                        [self oscDispatchPreview:[[addressPattern objectAtIndex:3] integerValue]];
                    } else if ( apParts == 4 ) {
                        [self oscDispatchPreview:[msg integerAtIndex:0]];
                    }
                }
                
                // /bmd/switcher/program/N [1.0]
                // /bmd/switcher/program   [N]
                else if ( [[addressPattern objectAtIndex:2] isEqualToString:@"program"] ) {
                    if ( apParts == 4 ) {
                        [self oscDispatchProgram:[[addressPattern objectAtIndex:3] integerValue]];
                    } else if ( apParts == 4 ) {
                        [self oscDispatchProgram:[msg integerAtIndex:0]];
                    }
                }
            }
        }
    }
}

-(void) postOSCStatus:(NSString*) status {
    [mOSCStatusField setStringValue:status];
}

-(void) oscInterfaceError:(NSString*) description level:(int) level {
    NSString* status = description;
    if ( level > LXOSCINTERFACE_MSG_INFO ) {
        status = [NSString stringWithFormat:@"Error: %@", description];
    }
    [self performSelectorOnMainThread:@selector(postOSCStatus:) withObject:status waitUntilDone:NO];
}

-(void) oscDispatchTransition:(NSString*) which arg:(CGFloat)arg {
    if ( mMixEffectBlock != NULL ) {

        if ( [which isEqualToString:@"auto"] ) {
            [self performSelectorOnMainThread:@selector(doPerformTransition:) withObject:[NSValue valuewithType:TRANSITION_TYPE_AUTO floatValue:arg] waitUntilDone:NO];
        } else if ( [which isEqualToString:@"cut"] ) {
            [self performSelectorOnMainThread:@selector(doPerformTransition:) withObject:[NSValue valuewithType:TRANSITION_TYPE_CUT floatValue:arg] waitUntilDone:NO];
        } else if ( [which isEqualToString:@"ftb"] ) {
            [self performSelectorOnMainThread:@selector(doPerformTransition:) withObject:[NSValue valuewithType:TRANSITION_TYPE_FTB floatValue:arg] waitUntilDone:NO];
        } else if ( [which isEqualToString:@"position"] ) {
            [self performSelectorOnMainThread:@selector(doPerformTransition:) withObject:[NSValue valuewithType:TRANSITION_TYPE_FADE floatValue:arg] waitUntilDone:NO];
        }
        
    }   // <- mMixEffectBlock != NULL
}

-(void) doPerformTransition:(NSValue*) v {
    TypeFloatPair pair = v.typeFloatPairValue;
    switch ( pair.type ) {
        case TRANSITION_TYPE_CUT:
            if ( pair.value == 1.0 ) {
                mMixEffectBlock->PerformCut();
            }
            break;
            
        case TRANSITION_TYPE_AUTO:
            if ( pair.value == 1.0 ) {
                mMixEffectBlock->PerformAutoTransition();
            }
            break;
            
        case TRANSITION_TYPE_FTB:
            if ( pair.value == 1.0 ) {
                mMixEffectBlock->PerformFadeToBlack();
            }
            break;
            
        case TRANSITION_TYPE_FADE:
            if (mMoveSliderDownwards) {
                mMixEffectBlock->SetTransitionPosition(1.0-pair.value);
            } else {
                mMixEffectBlock->SetTransitionPosition(pair.value);
            }
            break;
    }
}

-(void) oscDispatchPreview:(NSInteger) which {
    if ( mMixEffectBlock != NULL ) {

        NSInteger index = which - 1;
        if (( which > 0 ) && ( index < mNumberOfInputs )) {
            [self performSelectorOnMainThread:@selector(doSelectPreview:) withObject:[NSNumber numberWithInteger:index] waitUntilDone:NO];
        }
    
    }   // <- mMixEffectBlock != NULL
}

-(void) doSelectPreview:(NSNumber*) index {
    // note tags are just index of preview so the need to get them may not be necessary
    BMDSwitcherInputId previewID = [[mPreviewInputsPopup itemAtIndex:[index integerValue]] tag];
    mMixEffectBlock->SetPreviewInput(previewID);
}

-(void) oscDispatchProgram:(NSInteger) which {
    if ( mMixEffectBlock != NULL ) {

        NSInteger index = which - 1;
        if (( which > 0 ) && ( index < mNumberOfInputs )) {
            [self performSelectorOnMainThread:@selector(doSelectProgram:) withObject:[NSNumber numberWithInteger:index] waitUntilDone:NO];
        }
        
    }   // <- mMixEffectBlock != NULL
}

-(void) doSelectProgram:(NSNumber*) index
{
    // note tags are just index of preview so the need to get them may not be necessary
    BMDSwitcherInputId programID = [[mPreviewInputsPopup itemAtIndex:[index integerValue]] tag];
    mMixEffectBlock->SetProgramInput(programID);
}

@end
